name: TestSelf
on:
  pull_request:
  workflow_dispatch:
    inputs:
      test:
        type: string
        default: 'hoge'
        required: false
      flag:
        type: boolean
        default: false
        required: false
      text:
        type: string
        required: false
  workflow_call:
    inputs:
      test:
        type: string
        default: 'hoge'
        required: false
      flag:
        type: boolean
        default: false
        required: false
      text:
        type: string
        required: false

permissions:
  contents: read
  pull-requests: read

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: $github
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GITHUB_CONTEXT}"
      - name: GITHUB_EVENT_PATH
        run: |
          cat "${GITHUB_EVENT_PATH}"
      - name: job api response
        run: |
          gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs | jq
      - uses: actions/checkout@v4
      - uses: ./
        id: inputs-test
        with:
          name: test
          inputs-json: ${{ toJson(inputs || '{}') }}
      - name: Test test
        env:
          ACTUAL: ${{ steps.inputs-test.outputs.value }}
          EXPECT: ${{ inputs.test || 'hoge' }}
        run: |
          test "${ACTUAL}" == "${EXPECT}"
      - uses: ./
        id: inputs-flag
        with:
          name: flag
          inputs-json: ${{ toJson(inputs || '{}') }}
      - name: Test flag
        env:
          ACTUAL: ${{ steps.inputs-flag.outputs.value }}
          EXPECT: ${{ inputs.flag || 'false' }}
        run: |
          test "${ACTUAL}" == "${EXPECT}"
      - uses: ./
        id: inputs-all
        with:
          inputs-json: ${{ toJson(inputs || '{}') }}
      - name: Test
        env:
          ACTUAL_TEST: ${{ fromJson(steps.inputs-all.outputs.value).test }}
          EXPECT_TEST: ${{ inputs.test || 'hoge' }}
          ACTUAL_FLAG: ${{ fromJson(steps.inputs-all.outputs.value).flag }}
          EXPECT_FLAG: ${{ inputs.flag || 'false' }}
          ACTUAL_TEXT: ${{ fromJson(steps.inputs-all.outputs.value).text }}
          EXPECT_TEXT: ${{ inputs.text || '' }}
        run: |
          test "${{ env.ACTUAL_TEST }}" == "${EXPECT_TEST}"
          test "${{ env.ACTUAL_FLAG }}" == "${EXPECT_FLAG}"
          test "${{ env.ACTUAL_TEXT }}" == "${EXPECT_TEXT}"
      


  